!!!
%html{lang: "en"}
  %head
    %meta{charset: "utf-8"}/
    %title W2E
    %meta{content: "width=device-width, initial-scale=1.0", name: "viewport"}/
    %link{href: "//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css", rel: "stylesheet"}/
    / HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries
    /[if lt IE 9]
      <script src="../bower_components/html5shiv/dist/html5shiv.js"></script>
      <script src="../bower_components/respond/dest/respond.min.js"></script>
  %body 
    %div
      %h3
        You are at
        %span#location
    #user{"data-id" => current_user.id} 
    %div
      %input#locationNow{type: "button", value: "Get location now!"}/
      %input#startWatchLocation{type: "button", value: "Start watching location"}/
      %input#endWatchLocation{type: "button", value: "Stop watching location"}/
    #updateDiv
    %ul.nav.nav-tabs{style: "padding-top: 50px;"}
      %li.active
        %a{"data-toggle" => "tab", href: "#list", "data-number" => "1"} List
      %li
        %a{"data-toggle" => "tab", href: "#map", "data-number" => "2"} Map
    #myTabContent.tab-content
      #list.tab-pane.fade.active.in
        %ul.nav.nav-pills
          %li.dropdown
            %a.dropdown-toggle{"data-toggle" => "dropdown", href: "#"}
              Filter
              %span.caret
            %ul.dropdown-menu.centerMe
              %li
                %a.filter_button{filter_type: "price"} Price
              %li
                %a.filter_button{filter_type: "distance"} Distance
              %li
                %a.filter_button{filter_type: "time"} Waiting time
              %li
                %a.filter_button{filter_type: "rating"} Rating
              %li
                %a.filter_button{filter_type: "cuisine"} Cuisine
        #viewport
          %ul.list-group{id: 'restaurants'}
            - @restaurants.each do |restaurant|
              %a.list-group-item{:href => 'restaurants/' + restaurant.id.to_s, :class => "#{restaurant.area.downcase}"}
                .title
                  %h4= restaurant.name
                  - if restaurant.accepts_dinex
                    %span.badge.small-badge.pull-right.payment  Dinex
                  - if restaurant.accepts_cash
                    %span.badge.small-badge.pull-right.payment Cash
                  - if restaurant.accepts_credit
                    %span.badge.small-badge.pull-right.payment  Credit
                  - if restaurant.accepts_plaid_cash
                    %span.badge.small-badge.pull-right.payment  Plaid Cash
                  %p= restaurant.address
                  - if current_user.latitude && current_user.longitude
                    %div= restaurant.distance(current_user.latitude, current_user.longitude).round(2).to_s + " Miles"
                  %span.badge= restaurant.cuisine
                  %span
                    %h5= '$' * restaurant.price
                  %br
                  %span.glyphicon.glyphicon-star.glyphicon-star-full
                  %span.glyphicon.glyphicon-star.glyphicon-star-full
                  %span.glyphicon.glyphicon-star.glyphicon-star-full
                  %span.glyphicon.glyphicon-star.glyphicon-star-empty
                  %span.glyphicon.glyphicon-star.glyphicon-star-empty 
                  - if restaurant
                    %span.badge.glyphicon.glyphicon-time.pull-right.small-badge.time
                      Open Now
                  - else 
                    %span.badge.glyphicon.glyphicon-time.pull-right.small-badge.time
                      Closed
                  %span.badge.glyphicon.glyphicon-time.pull-right.small-badge.time 10min
                  %span.badge.glyphicon.glyphicon-user.pull-right.small-badge.time= restaurant.get_checked_in_users.size
              %a= link_to "Check In", check_in_path(current_user, :user => {:location => restaurant.id}), :method => :patch, class: "badge button btn btn-primary check-in"

 
      #map.tab-pane.fade
        %ul.nav.nav-pills
          %li.dropdown
            %a.dropdown-toggle{"data-toggle" => "dropdown", href: "#"}
              Filter
              %span.caret
            %ul.dropdown-menu.centerMe
              %li
                %a{href: "#", id: "price-filter"} Price
              %li
                %a{href: "#", id: "distance-filter"} Distance
              %li
                %a#time-filter{href: "#", id: "time-filter"} Waiting time
              %li
                %a#rating-filter{href: "#", id: "rating-filter"} Rating
    %div
      #map-canvas
  
    //#map-canvas.google-map-canvas -
    #FilterWindow.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "modalLabel", role: "dialog", tabindex: "-1"}
      .modal-dialog
        .modal-content
          .modal-header
            %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", type: "button"} Ã—
            %h4#modalLabel.modal-title Filter
          .modal-body
            %h5.pull-left Price:
            .text-center
              .btn-group.btn-group-justified
                .btn-group
                  %button.btn.btn-default.btn-price{type: "button"} $
                .btn-group
                  %button.btn.btn-default.btn-price{type: "button"} $$
                .btn-group
                  %button.btn.btn-default.btn-price{type: "button"} $$$
            %h5.pull-left Payment Method:
            .text-center
              .btn-group.btn-group-justified
                .btn-group
                  %button.btn.btn-default.btn-pay{type: "button"} Credit
                .btn-group
                  %button.btn.btn-default.btn-pay{type: "button"} Cash
                .btn-group
                  %button.btn.btn-default.btn-pay{type: "button"} Dinex
                .btn-group
                  %button.btn.btn-default.btn-pay{type: "button"} Block
            .modal-footer
              %button.btn.btn-default{"data-dismiss" => "modal", type: "button"} Close
              %button.btn.btn-primary{type: "button"} Apply
      %script{src: "//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js", type: "text/javascript"}

:javascript 

var id;
var nop = function() { };

  if (!navigator.geolocation) {
      navigator.geolocation = {};
  }
  if (!navigator.geolocation.getCurrentPosition) {
      navigator.geolocation.getCurrentPosition = nop;
  }

  document.getElementById('locationNow').onclick = function() {
    navigator.geolocation.getCurrentPosition(function(position) {
      document.getElementById('location').innerHTML = position.coords.latitude + ", " + position.coords.longitude;
      alert(position);
      id = $('#user').data('id');
      $.ajax({
        type: "PATCH",
        url: "users/add_coordinates/" + id,
        data: {user: {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
          }
        },
        success: function(data) {
          return console.log(data);
        },
        error: function(data) {
          return console.log(data);
        }
      });

    });
  }
  
  function successCallback(position) {
    document.getElementById('location').innerHTML = position.coords.latitude + ", " + position.coords.longitude + ": last updated at " + position.timestamp;
    var updateDiv = document.getElementById('updateDiv')
    updateDiv.style.visibility = 'visible';
    setTimeout(function() {
      updateDiv.style.visibility = 'hidden';
    }, 200);
  }

  function errCallback(err) {
      var message = err.message;
      var code = err.code;
      document.getElementById('location').innerHTML = "Erorr: " + code + ", " + err.message;
      //code = 0 => UNKNOWN_ERROR, 1 => PERMISSION_DENIED, 2 => POSITION_UNAVAILABLE, 3 => TIMEOUT
  }

  // optional for geolocation.watchPosition
  var options = { 
      enableHighAccuracy: true,
      maximumAge: 30000,
      timeout: 27000
  };

  var watchId;
  document.getElementById('startWatchLocation').onclick = function() {
    watchId = navigator.geolocation.watchPosition(successCallback, errCallback, options);
  };
  document.getElementById('endWatchLocation').onclick = function() {
    navigator.geolocation.clearWatch(watchId);
  };